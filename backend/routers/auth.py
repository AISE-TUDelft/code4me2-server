# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-04-24T17:57:06+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import APIRouter

from ..models.auth_models import (
    EmailPasswordAuth,
    Error,
    NewUser,
    UserAuthenticatePostResponse,
    UserExistsPostRequest,
    UserExistsPostResponse,
    UserNewPostResponse,
)

auth_router = APIRouter()


@auth_router.post(
    "/user/authenticate",
    response_model=UserAuthenticatePostResponse,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "429": {"model": Error},
        "500": {"model": Error},
    },
    tags=["User"],
)
def authenticate_user(
    body: EmailPasswordAuth,
) -> Union[UserAuthenticatePostResponse, Error]:
    """
    Authenticate a user
    Note: There are some nuances to how this should be handled.
    1. There is a possibility that the password field is JWT token for OAuth providers (this should be checked for)
    1.1. Authentication should first check if the password is a JWT token
    1.2. If it is a JWT token, then the the validity of the token should be checked
    1.3. If the token is valid, then the user should be authenticated using the token and allocated a session
    1.4. The provider is always Google
    2. The filed can also simply represent a password for a user.
    3. The authentication should either return a UserAuthenticationPostResponse or an Error
    """
    pass


@auth_router.post(
    "/user/exists",
    response_model=UserExistsPostResponse,
    responses={
        "400": {"model": Error},
        "429": {"model": Error},
        "500": {"model": Error},
    },
    tags=["User"],
)
def check_user_exists(
    body: UserExistsPostRequest,
) -> Union[UserExistsPostResponse, Error]:
    """
    Check if a user exists -> pretty straightforward
    """
    pass


@auth_router.post(
    "/user/new",
    response_model=None,
    responses={
        "201": {"model": UserNewPostResponse},
        "400": {"model": Error},
        "409": {"model": Error},
        "429": {"model": Error},
        "500": {"model": Error},
    },
    tags=["User"],
)
def create_user(body: NewUser) -> Optional[Union[UserNewPostResponse, Error]]:
    """
    Create a new user -> also pretty straightforward
    1. The user should be created in the database if it does not exist
    2. The user should be sent a verification email
    3. The user should be sent a success message
    4. If the user already exists, then a 409 error should be returned
    """
    pass
