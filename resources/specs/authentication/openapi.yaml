openapi: 3.0.3
info:
  title: Authentication API
  description: API for user authentication and management
  version: 1.0.0
  contact:
    email: koohestaniroham@gmail.com
servers:
  - url: https://api.coco.com
    description: Production server

paths:
  /user/exists:
    post:
      summary: Check if a user exists
      description: Checks if a user with the given email exists in the system
      operationId: checkUserExists
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Email address to check
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: Whether the user exists
        "400":
          $ref: "#/components/responses/BadRequest"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - apiKey: []

  /user/new:
    post:
      summary: Create a new user
      description: Creates a new user with the provided information
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully. Please check your email for verification.
                  userId:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
                  sessionToken:
                    type: string
                    description: Session token for authentication
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: User already exists with this email
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - apiKey: []

  /user/authenticate:
    post:
      summary: Authenticate a user
      description: Authenticates a user with email and password or OAuth token
      operationId: authenticateUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/EmailPasswordAuth"
                - $ref: "#/components/schemas/OAuthAuth"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  sessionToken:
                    type: string
                    description: Session token for authentication
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: Invalid email or password
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - apiKey: []

components:
  schemas:
    NewUser:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        password:
          type: string
          format: password
          description: User's password (will be hashed)
          minLength: 8
        googleId:
          type: string
          description: Google ID for users signing up with Google (optional)
        googleCredential:
          type: string
          description: Google JWT credential for authentication (optional)

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        verified:
          type: boolean
          description: Whether the user's email has been verified

    EmailPasswordAuth:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password

    OAuthAuth:
      type: object
      required:
        - provider
        - token
      properties:
        provider:
          type: string
          enum: [google]
          description: OAuth provider
        token:
          type: string
          description: OAuth token in JWT format

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Invalid request parameters

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Too many requests. Please try again later.

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: An unexpected error occurred

  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-Key
      in: header
      description: API key for authentication

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authenticated requests
