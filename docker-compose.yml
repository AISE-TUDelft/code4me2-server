version: "3.9"

services:
  db:
    image: postgres:16
    container_name: postgres
    ports:
      - ${DB_PORT}:5432
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.11
    container_name: pgadmin
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - ${REDIS_PORT}:6379
    expose:
      - 6379
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  backend:
    build: .
    container_name: backend
    command:
      ["/bin/bash", "-c", "source activate myenv && python /app/src/main.py"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    expose:
      - ${REACT_APP_BACKEND_PORT}
    ports:
      - "8008:8008"
    volumes:
      - .:/app
    environment:
      - REDIS_HOST=redis
      - NVIDIA_VISIBLE_DEVICES=0
      - REDIS_PORT=6379
      - DB_HOST=db
      - DB_PORT=5432
      - WEBSITE_HOST=website
      - WEBSITE_PORT=3000
      - PYTHONPATH=/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "http://localhost:${REACT_APP_BACKEND_PORT}/docs",
        ]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  website:
    image: node:18
    container_name: website
    working_dir: /website
    command: ["npm", "start"]
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./src/website:/website
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:1.25
    container_name: nginx
    ports:
      - "8000:8000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      website:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  test_db:
    image: postgres:16
    container_name: postgres_test
    ports:
      - "5433:5432" # Different port to avoid conflicts
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=test_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/init_test.sql:/docker-entrypoint-initdb.d/init_test.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  pgadmin_data:
