services:
  db:
    image: postgres:16
    container_name: postgres
    ports:
      - ${DB_PORT}:5432
    expose:
      - 5432
    volumes:
      - .:/app
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      start_period: 0s
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.11
    container_name: pgadmin
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - .:/app
      - ${DATA_DIR}/pgadmin:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    command: >
      sh -c "
        mkdir -p /var/lib/pgadmin &&
        chown -R pgadmin:pgadmin /var/lib/pgadmin &&
        chmod -R 755 /var/lib/pgadmin &&
        /entrypoint.sh
      "
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80"]
      start_period: 0s
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - ${REDIS_PORT}:6379
    expose:
      - 6379
    volumes:
      - .:/app
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 0s
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  redis-celery:
    image: redis:7.0
    container_name: redis-celery
    ports:
      - ${CELERY_BROKER_PORT}:6379
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 0s
      start_interval: 0s
      interval: 30s
      timeout: 5s
      retries: 3

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    command: [
        "/bin/bash",
        "-c",
        "source activate myenv &&
        huggingface-cli login --token $HF_TOKEN &&
        celery -A celery_app.celery_app worker --loglevel=info -E -Q llm,db --concurrency=1 --prefetch-multiplier=1",
      ]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    depends_on:
      redis-celery:
        condition: service_healthy
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_HOST=redis-celery
      - CELERY_BROKER_PORT=6379
      - DB_HOST=db
      - DB_PORT=5432
      - PYTHONPATH=/app/src
      - PYTHONMULTIPROCESSING_START_METHOD=spawn
      - TOKENIZERS_PARALLELISM=false
      - OMP_NUM_THREADS=1
      - HF_TOKEN=${HF_TOKEN}
      - HF_HOME=/app/hf_cache
      - HF_HUB_CACHE=/app/hf_cache
      - TRANSFORMERS_CACHE=/app/hf_cache
      - MODEL_CACHE_DIR=/app/hf_cache

    volumes:
      - .:/app
      - ${DATA_DIR}/hf:/app/hf_cache
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "source activate myenv && celery -A celery_app.celery_app status",
        ]
      start_interval: 0s
      interval: 60s
      timeout: 10s
      retries: 3

  backend:
    build: .
    container_name: backend
    command:
      [
        "/bin/bash",
        "-c",
        "source activate myenv && huggingface-cli login --token $HF_TOKEN && python /app/src/main.py",
      ]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    expose:
      - ${SERVER_PORT}
    ports:
      - "8008:8008"
    volumes:
      - .:/app
      - ${DATA_DIR}/hf:/app/hf_cache
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_HOST=redis-celery
      - CELERY_BROKER_PORT=6379
      - DB_HOST=db
      - DB_PORT=5432
      - WEBSITE_HOST=website
      - WEBSITE_PORT=3000
      - PYTHONPATH=/app/src
      - HF_TOKEN=${HF_TOKEN}
      - HF_HOME=/app/hf_cache
      - HF_HUB_CACHE=/app/hf_cache
      - TRANSFORMERS_CACHE=/app/hf_cache
      - MODEL_CACHE_DIR=/app/hf_cache
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "http://${SERVER_HOST}:${SERVER_PORT}/api/ping",
        ]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  website:
    image: node:18
    container_name: website
    working_dir: /website
    command: bash -c "npm install && npm start"
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./src/website:/website
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:1.25
    container_name: nginx
    ports:
      - "8000:8000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      website:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      start_interval: 0s
      interval: 60s
      timeout: 5s
      retries: 3

#  test_db:
#    image: postgres:16
#    container_name: postgres_test
#    ports:
#      - "5433:5432"
#    environment:
#      - POSTGRES_PASSWORD=postgres
#      - POSTGRES_USER=postgres
#      - POSTGRES_DB=test_db
#    volumes:
#      - .:/app
#      - ./src/database/init_test.sql:/docker-entrypoint-initdb.d/init_test.sql
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 5s
#      timeout: 5s
#      retries: 5

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/postgres
  pgadmin_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/pgadmin
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/redis
  redis_celery_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/redis_celery
  website_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/website
  celery_worker_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/celery_worker
