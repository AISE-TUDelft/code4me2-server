version: "3.9"

services:

  backend-test:
    build: .
    container_name: backend-test
    command: [ "/bin/bash", "-c", "source activate myenv && pip install pytest pytest-cov && python -m pytest tests/test_user_crud.py -v" ]
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/code4meV2
      - TEST_DATABASE_URL=postgresql://postgres:postgres@test_db:5432/test_db
    volumes:
      - .:/app

  test_db:
    image: postgres:16
    container_name: postgres_test
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=test_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5


  db:
    image: postgres:16
    container_name: postgres
    ports:
      - ${DB_PORT}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/backend/database:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: .
    container_name: backend
    command:
      [
        "/bin/bash",
        "-c",
        "source activate myenv && uvicorn src.backend.main:app --host 0.0.0.0 --port 8000 --reload",
      ]
    expose:
      - 8000
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy  # Wait for the database to be healthy
    volumes:
      - .:/app

  pgadmin:
    image: dpage/pgadmin4:8.11
    container_name: pgadmin
    ports:
      - ${PGADMIN_PORT}:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  website:
    image: node:18
    container_name: website
    working_dir: /website
    command: ["npm", "start"]
    expose:
      - 3000
    volumes:
      - ./src/website:/website # Mount the website folder to the container
    depends_on:
      - db
  nginx:
    image: nginx:1.25
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - website

volumes:
  postgres_data:
  pgadmin_data: